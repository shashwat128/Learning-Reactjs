{"ast":null,"code":"import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n//existing state as the first argument, action dispatched as second\n//state given default value, so that when the reducer is executed for the first time, we have an initial state.\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n//Object as an argument.\nconst counterSlice = createSlice({\n  name: \"counter\",\n  //identifier\n  //all the methods inside reducer will be called by Redux and will automatically receive the current state\n  initialState: initialState,\n  //initial state\n  reducers: {\n    // we wont need action here because these methods will automatically be called depending on which action was triggered\n    //We are allowed to mutate the state here\n    //because redux toolkit internally uses another package \"imgur\", which detects codes like this and clone the existing state,  create a new state object, keep all the state which we are not editing, and override the state which we are editing in an immutable way\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    //for this we need extra data\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCOunter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n/*counterReducer old (without toolkit)\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n\r\n      //Never mutate the current state always override - could lead to unexpected bugs and side-effects (state get out of sync, and suddenly the UI is not reflecting your state)\r\n      //state.counter++   --   XXX\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}; \r\n\r\n//central data (state) store\r\n//create store wants a pointer at a resucer function as a parametre.\r\nconst store = createStore(counterReducer);\r\n*/\n\nconst store = configureStore({});\n/* redux solution\r\nconst store = createStore(counterSlice.reducer);\r\n//this is a good to go solution for smaller application \r\n//but if the application goes bigger then it will grow in \r\n//multiple state slices too and we would face problem with this solution. \r\n//because there could only be one reducer be passed to \r\n//create storeand when we have multiple slices, we have \r\n//multiple reducers which we access with .reducer\r\n*/\n\nexport default store;","map":{"version":3,"names":["createStore","configureStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCOunter","store"],"sources":["D:/Programming/JavaScript/Reactjs/Standard Approach/Section 19 - Redux/Project/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//existing state as the first argument, action dispatched as second\r\n//state given default value, so that when the reducer is executed for the first time, we have an initial state.\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n//Object as an argument.\r\nconst counterSlice = createSlice({\r\n  name: \"counter\", //identifier\r\n  //all the methods inside reducer will be called by Redux and will automatically receive the current state\r\n  initialState: initialState, //initial state\r\n  reducers: {\r\n    // we wont need action here because these methods will automatically be called depending on which action was triggered\r\n    //We are allowed to mutate the state here\r\n    //because redux toolkit internally uses another package \"imgur\", which detects codes like this and clone the existing state,  create a new state object, keep all the state which we are not editing, and override the state which we are editing in an immutable way\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    //for this we need extra data\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.amount;\r\n    },\r\n    toggleCOunter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n/*counterReducer old (without toolkit)\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n\r\n      //Never mutate the current state always override - could lead to unexpected bugs and side-effects (state get out of sync, and suddenly the UI is not reflecting your state)\r\n      //state.counter++   --   XXX\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}; \r\n\r\n//central data (state) store\r\n//create store wants a pointer at a resucer function as a parametre.\r\nconst store = createStore(counterReducer);\r\n*/\r\n\r\nconst store = configureStore({});\r\n/* redux solution\r\nconst store = createStore(counterSlice.reducer);\r\n//this is a good to go solution for smaller application \r\n//but if the application goes bigger then it will grow in \r\n//multiple state slices too and we would face problem with this solution. \r\n//because there could only be one reducer be passed to \r\n//create storeand when we have multiple slices, we have \r\n//multiple reducers which we access with .reducer\r\n*/\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;;AAE9D;AACA;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EAAE;EACjB;EACAJ,YAAY,EAAEA,YAAY;EAAE;EAC5BK,QAAQ,EAAE;IACR;IACA;IACA;IACAC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACD;IACAQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC/C,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMW,KAAK,GAAGf,cAAc,CAAC,CAAC,CAAC,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAee,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}