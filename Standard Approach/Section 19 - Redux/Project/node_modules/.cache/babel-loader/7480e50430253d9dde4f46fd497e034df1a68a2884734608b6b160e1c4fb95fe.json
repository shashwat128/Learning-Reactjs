{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n//existing state as the first argument, asction dispatched as second\n//state given default value, so that when the reducer is executed for the first time, we have an initial state.\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n//Object as an argument.\ncreateSlice({\n  name: \"counter\",\n  //identifier\n  initialState: initialState,\n  //initial state\n  reducers: {\n    increment() {},\n    decrement() {},\n    increase() {},\n    toggleCOunter() {}\n  }\n});\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n\n      //Never mutate the current state always override - could lead to unexpected bugs and side-effects (state get out of sync, and suddenly the UI is not reflecting your state)\n      //state.counter++   --   XXX\n    };\n  }\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\n\n//central data (state) store\n//create store wants a pointer at a resucer function as a parametre.\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","decrement","increase","toggleCOunter","counterReducer","state","arguments","length","undefined","action","type","amount","store"],"sources":["D:/Programming/JavaScript/Reactjs/Standard Approach/Section 19 - Redux/Project/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//existing state as the first argument, asction dispatched as second\r\n//state given default value, so that when the reducer is executed for the first time, we have an initial state.\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n//Object as an argument.\r\ncreateSlice({\r\n  name: \"counter\", //identifier\r\n  initialState: initialState, //initial state\r\n  reducers: {\r\n    increment() {},\r\n    decrement() {},\r\n    increase() {},\r\n    toggleCOunter() {},\r\n  },\r\n});\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n\r\n      //Never mutate the current state always override - could lead to unexpected bugs and side-effects (state get out of sync, and suddenly the UI is not reflecting your state)\r\n      //state.counter++   --   XXX\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\n//central data (state) store\r\n//create store wants a pointer at a resucer function as a parametre.\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACAH,WAAW,CAAC;EACVI,IAAI,EAAE,SAAS;EAAE;EACjBH,YAAY,EAAEA,YAAY;EAAE;EAC5BI,QAAQ,EAAE;IACRC,SAASA,CAAA,EAAG,CAAC,CAAC;IACdC,SAASA,CAAA,EAAG,CAAC,CAAC;IACdC,QAAQA,CAAA,EAAG,CAAC,CAAC;IACbC,aAAaA,CAAA,EAAG,CAAC;EACnB;AACF,CAAC,CAAC;AAEF,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,YAAY;EAAA,IAAEc,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClD,IAAIC,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLd,OAAO,EAAES,KAAK,CAACT,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEQ,KAAK,CAACR;IACrB,CAAC;EACH;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACLd,OAAO,EAAES,KAAK,CAACT,OAAO,GAAGa,MAAM,CAACE,MAAM;MACtCd,WAAW,EAAEQ,KAAK,CAACR;;MAEnB;MACA;IACF,CAAC;EACH;;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLd,OAAO,EAAES,KAAK,CAACT,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEQ,KAAK,CAACR;IACrB,CAAC;EACH;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLb,WAAW,EAAE,CAACQ,KAAK,CAACR,WAAW;MAC/BD,OAAO,EAAES,KAAK,CAACT;IACjB,CAAC;EACH;EAEA,OAAOS,KAAK;AACd,CAAC;;AAED;AACA;AACA,MAAMO,KAAK,GAAGnB,WAAW,CAACW,cAAc,CAAC;AAEzC,eAAeQ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}